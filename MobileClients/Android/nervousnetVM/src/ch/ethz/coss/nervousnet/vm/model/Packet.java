package ch.ethz.coss.nervousnet.vm.model;

import ch.ethz.coss.nervousnet.vm.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "PACKET".
 */
public class Packet {

    /** Not-null value. */
    private java.util.Date TimeStamp;
    private java.util.Date sensor1;
    private java.util.Date sensor2;
    private java.util.Date sensor3;
    private java.util.Date sensor4;
    private java.util.Date sensor5;
    private java.util.Date sensor6;
    private java.util.Date sensor7;
    private java.util.Date sensor8;
    private java.util.Date sensor9;
    private java.util.Date sensor10;
    private java.util.Date sensor11;
    private java.util.Date sensor12;
    private java.util.Date sensor13;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PacketDao myDao;

    private LocationReading locationReading;
    private java.util.Date locationReading__resolvedKey;

    private AccelReading accelReading;
    private java.util.Date accelReading__resolvedKey;

    private BatteryReading batteryReading;
    private java.util.Date batteryReading__resolvedKey;

    private BeaconReading beaconReading;
    private java.util.Date beaconReading__resolvedKey;

    private ConnectivityReading connectivityReading;
    private java.util.Date connectivityReading__resolvedKey;

    private GyroReading gyroReading;
    private java.util.Date gyroReading__resolvedKey;

    private HumidityReading humidityReading;
    private java.util.Date humidityReading__resolvedKey;

    private LightReading lightReading;
    private java.util.Date lightReading__resolvedKey;

    private MagneticReading magneticReading;
    private java.util.Date magneticReading__resolvedKey;

    private NoiseReading noiseReading;
    private java.util.Date noiseReading__resolvedKey;

    private PressureReading pressureReading;
    private java.util.Date pressureReading__resolvedKey;

    private ProximityReading proximityReading;
    private java.util.Date proximityReading__resolvedKey;

    private TemperatureReading temperatureReading;
    private java.util.Date temperatureReading__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Packet() {
    }

    public Packet(java.util.Date TimeStamp) {
        this.TimeStamp = TimeStamp;
    }

    public Packet(java.util.Date TimeStamp, java.util.Date sensor1, java.util.Date sensor2, java.util.Date sensor3, java.util.Date sensor4, java.util.Date sensor5, java.util.Date sensor6, java.util.Date sensor7, java.util.Date sensor8, java.util.Date sensor9, java.util.Date sensor10, java.util.Date sensor11, java.util.Date sensor12, java.util.Date sensor13) {
        this.TimeStamp = TimeStamp;
        this.sensor1 = sensor1;
        this.sensor2 = sensor2;
        this.sensor3 = sensor3;
        this.sensor4 = sensor4;
        this.sensor5 = sensor5;
        this.sensor6 = sensor6;
        this.sensor7 = sensor7;
        this.sensor8 = sensor8;
        this.sensor9 = sensor9;
        this.sensor10 = sensor10;
        this.sensor11 = sensor11;
        this.sensor12 = sensor12;
        this.sensor13 = sensor13;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPacketDao() : null;
    }

    /** Not-null value. */
    public java.util.Date getTimeStamp() {
        return TimeStamp;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTimeStamp(java.util.Date TimeStamp) {
        this.TimeStamp = TimeStamp;
    }

    public java.util.Date getSensor1() {
        return sensor1;
    }

    public void setSensor1(java.util.Date sensor1) {
        this.sensor1 = sensor1;
    }

    public java.util.Date getSensor2() {
        return sensor2;
    }

    public void setSensor2(java.util.Date sensor2) {
        this.sensor2 = sensor2;
    }

    public java.util.Date getSensor3() {
        return sensor3;
    }

    public void setSensor3(java.util.Date sensor3) {
        this.sensor3 = sensor3;
    }

    public java.util.Date getSensor4() {
        return sensor4;
    }

    public void setSensor4(java.util.Date sensor4) {
        this.sensor4 = sensor4;
    }

    public java.util.Date getSensor5() {
        return sensor5;
    }

    public void setSensor5(java.util.Date sensor5) {
        this.sensor5 = sensor5;
    }

    public java.util.Date getSensor6() {
        return sensor6;
    }

    public void setSensor6(java.util.Date sensor6) {
        this.sensor6 = sensor6;
    }

    public java.util.Date getSensor7() {
        return sensor7;
    }

    public void setSensor7(java.util.Date sensor7) {
        this.sensor7 = sensor7;
    }

    public java.util.Date getSensor8() {
        return sensor8;
    }

    public void setSensor8(java.util.Date sensor8) {
        this.sensor8 = sensor8;
    }

    public java.util.Date getSensor9() {
        return sensor9;
    }

    public void setSensor9(java.util.Date sensor9) {
        this.sensor9 = sensor9;
    }

    public java.util.Date getSensor10() {
        return sensor10;
    }

    public void setSensor10(java.util.Date sensor10) {
        this.sensor10 = sensor10;
    }

    public java.util.Date getSensor11() {
        return sensor11;
    }

    public void setSensor11(java.util.Date sensor11) {
        this.sensor11 = sensor11;
    }

    public java.util.Date getSensor12() {
        return sensor12;
    }

    public void setSensor12(java.util.Date sensor12) {
        this.sensor12 = sensor12;
    }

    public java.util.Date getSensor13() {
        return sensor13;
    }

    public void setSensor13(java.util.Date sensor13) {
        this.sensor13 = sensor13;
    }

    /** To-one relationship, resolved on first access. */
    public LocationReading getLocationReading() {
        java.util.Date __key = this.sensor1;
        if (locationReading__resolvedKey == null || locationReading__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LocationReadingDao targetDao = daoSession.getLocationReadingDao();
            LocationReading locationReadingNew = targetDao.load(__key);
            synchronized (this) {
                locationReading = locationReadingNew;
            	locationReading__resolvedKey = __key;
            }
        }
        return locationReading;
    }

    public void setLocationReading(LocationReading locationReading) {
        synchronized (this) {
            this.locationReading = locationReading;
            sensor1 = locationReading == null ? null : locationReading.getTimeStamp();
            locationReading__resolvedKey = sensor1;
        }
    }

    /** To-one relationship, resolved on first access. */
    public AccelReading getAccelReading() {
        java.util.Date __key = this.sensor2;
        if (accelReading__resolvedKey == null || accelReading__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AccelReadingDao targetDao = daoSession.getAccelReadingDao();
            AccelReading accelReadingNew = targetDao.load(__key);
            synchronized (this) {
                accelReading = accelReadingNew;
            	accelReading__resolvedKey = __key;
            }
        }
        return accelReading;
    }

    public void setAccelReading(AccelReading accelReading) {
        synchronized (this) {
            this.accelReading = accelReading;
            sensor2 = accelReading == null ? null : accelReading.getTimeStamp();
            accelReading__resolvedKey = sensor2;
        }
    }

    /** To-one relationship, resolved on first access. */
    public BatteryReading getBatteryReading() {
        java.util.Date __key = this.sensor3;
        if (batteryReading__resolvedKey == null || batteryReading__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BatteryReadingDao targetDao = daoSession.getBatteryReadingDao();
            BatteryReading batteryReadingNew = targetDao.load(__key);
            synchronized (this) {
                batteryReading = batteryReadingNew;
            	batteryReading__resolvedKey = __key;
            }
        }
        return batteryReading;
    }

    public void setBatteryReading(BatteryReading batteryReading) {
        synchronized (this) {
            this.batteryReading = batteryReading;
            sensor3 = batteryReading == null ? null : batteryReading.getTimeStamp();
            batteryReading__resolvedKey = sensor3;
        }
    }

    /** To-one relationship, resolved on first access. */
    public BeaconReading getBeaconReading() {
        java.util.Date __key = this.sensor4;
        if (beaconReading__resolvedKey == null || beaconReading__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BeaconReadingDao targetDao = daoSession.getBeaconReadingDao();
            BeaconReading beaconReadingNew = targetDao.load(__key);
            synchronized (this) {
                beaconReading = beaconReadingNew;
            	beaconReading__resolvedKey = __key;
            }
        }
        return beaconReading;
    }

    public void setBeaconReading(BeaconReading beaconReading) {
        synchronized (this) {
            this.beaconReading = beaconReading;
            sensor4 = beaconReading == null ? null : beaconReading.getTimeStamp();
            beaconReading__resolvedKey = sensor4;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ConnectivityReading getConnectivityReading() {
        java.util.Date __key = this.sensor5;
        if (connectivityReading__resolvedKey == null || connectivityReading__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ConnectivityReadingDao targetDao = daoSession.getConnectivityReadingDao();
            ConnectivityReading connectivityReadingNew = targetDao.load(__key);
            synchronized (this) {
                connectivityReading = connectivityReadingNew;
            	connectivityReading__resolvedKey = __key;
            }
        }
        return connectivityReading;
    }

    public void setConnectivityReading(ConnectivityReading connectivityReading) {
        synchronized (this) {
            this.connectivityReading = connectivityReading;
            sensor5 = connectivityReading == null ? null : connectivityReading.getTimeStamp();
            connectivityReading__resolvedKey = sensor5;
        }
    }

    /** To-one relationship, resolved on first access. */
    public GyroReading getGyroReading() {
        java.util.Date __key = this.sensor6;
        if (gyroReading__resolvedKey == null || gyroReading__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GyroReadingDao targetDao = daoSession.getGyroReadingDao();
            GyroReading gyroReadingNew = targetDao.load(__key);
            synchronized (this) {
                gyroReading = gyroReadingNew;
            	gyroReading__resolvedKey = __key;
            }
        }
        return gyroReading;
    }

    public void setGyroReading(GyroReading gyroReading) {
        synchronized (this) {
            this.gyroReading = gyroReading;
            sensor6 = gyroReading == null ? null : gyroReading.getTimeStamp();
            gyroReading__resolvedKey = sensor6;
        }
    }

    /** To-one relationship, resolved on first access. */
    public HumidityReading getHumidityReading() {
        java.util.Date __key = this.sensor7;
        if (humidityReading__resolvedKey == null || humidityReading__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HumidityReadingDao targetDao = daoSession.getHumidityReadingDao();
            HumidityReading humidityReadingNew = targetDao.load(__key);
            synchronized (this) {
                humidityReading = humidityReadingNew;
            	humidityReading__resolvedKey = __key;
            }
        }
        return humidityReading;
    }

    public void setHumidityReading(HumidityReading humidityReading) {
        synchronized (this) {
            this.humidityReading = humidityReading;
            sensor7 = humidityReading == null ? null : humidityReading.getTimeStamp();
            humidityReading__resolvedKey = sensor7;
        }
    }

    /** To-one relationship, resolved on first access. */
    public LightReading getLightReading() {
        java.util.Date __key = this.sensor8;
        if (lightReading__resolvedKey == null || lightReading__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LightReadingDao targetDao = daoSession.getLightReadingDao();
            LightReading lightReadingNew = targetDao.load(__key);
            synchronized (this) {
                lightReading = lightReadingNew;
            	lightReading__resolvedKey = __key;
            }
        }
        return lightReading;
    }

    public void setLightReading(LightReading lightReading) {
        synchronized (this) {
            this.lightReading = lightReading;
            sensor8 = lightReading == null ? null : lightReading.getTimeStamp();
            lightReading__resolvedKey = sensor8;
        }
    }

    /** To-one relationship, resolved on first access. */
    public MagneticReading getMagneticReading() {
        java.util.Date __key = this.sensor9;
        if (magneticReading__resolvedKey == null || magneticReading__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MagneticReadingDao targetDao = daoSession.getMagneticReadingDao();
            MagneticReading magneticReadingNew = targetDao.load(__key);
            synchronized (this) {
                magneticReading = magneticReadingNew;
            	magneticReading__resolvedKey = __key;
            }
        }
        return magneticReading;
    }

    public void setMagneticReading(MagneticReading magneticReading) {
        synchronized (this) {
            this.magneticReading = magneticReading;
            sensor9 = magneticReading == null ? null : magneticReading.getTimeStamp();
            magneticReading__resolvedKey = sensor9;
        }
    }

    /** To-one relationship, resolved on first access. */
    public NoiseReading getNoiseReading() {
        java.util.Date __key = this.sensor10;
        if (noiseReading__resolvedKey == null || noiseReading__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            NoiseReadingDao targetDao = daoSession.getNoiseReadingDao();
            NoiseReading noiseReadingNew = targetDao.load(__key);
            synchronized (this) {
                noiseReading = noiseReadingNew;
            	noiseReading__resolvedKey = __key;
            }
        }
        return noiseReading;
    }

    public void setNoiseReading(NoiseReading noiseReading) {
        synchronized (this) {
            this.noiseReading = noiseReading;
            sensor10 = noiseReading == null ? null : noiseReading.getTimeStamp();
            noiseReading__resolvedKey = sensor10;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PressureReading getPressureReading() {
        java.util.Date __key = this.sensor11;
        if (pressureReading__resolvedKey == null || pressureReading__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PressureReadingDao targetDao = daoSession.getPressureReadingDao();
            PressureReading pressureReadingNew = targetDao.load(__key);
            synchronized (this) {
                pressureReading = pressureReadingNew;
            	pressureReading__resolvedKey = __key;
            }
        }
        return pressureReading;
    }

    public void setPressureReading(PressureReading pressureReading) {
        synchronized (this) {
            this.pressureReading = pressureReading;
            sensor11 = pressureReading == null ? null : pressureReading.getTimeStamp();
            pressureReading__resolvedKey = sensor11;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ProximityReading getProximityReading() {
        java.util.Date __key = this.sensor12;
        if (proximityReading__resolvedKey == null || proximityReading__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProximityReadingDao targetDao = daoSession.getProximityReadingDao();
            ProximityReading proximityReadingNew = targetDao.load(__key);
            synchronized (this) {
                proximityReading = proximityReadingNew;
            	proximityReading__resolvedKey = __key;
            }
        }
        return proximityReading;
    }

    public void setProximityReading(ProximityReading proximityReading) {
        synchronized (this) {
            this.proximityReading = proximityReading;
            sensor12 = proximityReading == null ? null : proximityReading.getTimeStamp();
            proximityReading__resolvedKey = sensor12;
        }
    }

    /** To-one relationship, resolved on first access. */
    public TemperatureReading getTemperatureReading() {
        java.util.Date __key = this.sensor13;
        if (temperatureReading__resolvedKey == null || temperatureReading__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TemperatureReadingDao targetDao = daoSession.getTemperatureReadingDao();
            TemperatureReading temperatureReadingNew = targetDao.load(__key);
            synchronized (this) {
                temperatureReading = temperatureReadingNew;
            	temperatureReading__resolvedKey = __key;
            }
        }
        return temperatureReading;
    }

    public void setTemperatureReading(TemperatureReading temperatureReading) {
        synchronized (this) {
            this.temperatureReading = temperatureReading;
            sensor13 = temperatureReading == null ? null : temperatureReading.getTimeStamp();
            temperatureReading__resolvedKey = sensor13;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
