package ch.ethz.coss.nervousnet.vm.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ch.ethz.coss.nervousnet.vm.model.NoiseData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOISE_DATA".
*/
public class NoiseDataDao extends AbstractDao<NoiseData, Long> {

    public static final String TABLENAME = "NOISE_DATA";

    /**
     * Properties of entity NoiseData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TimeStamp = new Property(0, long.class, "TimeStamp", true, "TIME_STAMP");
        public final static Property Decibel = new Property(1, Float.class, "Decibel", false, "DECIBEL");
        public final static Property Volatility = new Property(2, long.class, "Volatility", false, "VOLATILITY");
        public final static Property ShareFlag = new Property(3, Boolean.class, "ShareFlag", false, "SHARE_FLAG");
    };


    public NoiseDataDao(DaoConfig config) {
        super(config);
    }
    
    public NoiseDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOISE_DATA\" (" + //
                "\"TIME_STAMP\" INTEGER PRIMARY KEY NOT NULL ," + // 0: TimeStamp
                "\"DECIBEL\" REAL," + // 1: Decibel
                "\"VOLATILITY\" INTEGER NOT NULL ," + // 2: Volatility
                "\"SHARE_FLAG\" INTEGER);"); // 3: ShareFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOISE_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NoiseData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTimeStamp());
 
        Float Decibel = entity.getDecibel();
        if (Decibel != null) {
            stmt.bindDouble(2, Decibel);
        }
        stmt.bindLong(3, entity.getVolatility());
 
        Boolean ShareFlag = entity.getShareFlag();
        if (ShareFlag != null) {
            stmt.bindLong(4, ShareFlag ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NoiseData readEntity(Cursor cursor, int offset) {
        NoiseData entity = new NoiseData( //
            cursor.getLong(offset + 0), // TimeStamp
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // Decibel
            cursor.getLong(offset + 2), // Volatility
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0 // ShareFlag
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NoiseData entity, int offset) {
        entity.setTimeStamp(cursor.getLong(offset + 0));
        entity.setDecibel(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setVolatility(cursor.getLong(offset + 2));
        entity.setShareFlag(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(NoiseData entity, long rowId) {
        entity.setTimeStamp(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(NoiseData entity) {
        if(entity != null) {
            return entity.getTimeStamp();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
