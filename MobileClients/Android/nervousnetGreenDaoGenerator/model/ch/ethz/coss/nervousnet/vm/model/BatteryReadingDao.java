package ch.ethz.coss.nervousnet.vm.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ch.ethz.coss.nervousnet.vm.model.BatteryReading;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BATTERY_READING".
*/
public class BatteryReadingDao extends AbstractDao<BatteryReading, java.util.Date> {

    public static final String TABLENAME = "BATTERY_READING";

    /**
     * Properties of entity BatteryReading.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TimeStamp = new Property(0, java.util.Date.class, "TimeStamp", true, "TIME_STAMP");
        public final static Property Percent = new Property(1, Float.class, "Percent", false, "PERCENT");
        public final static Property ChargingType = new Property(2, Byte.class, "ChargingType", false, "CHARGING_TYPE");
        public final static Property Health = new Property(3, Byte.class, "Health", false, "HEALTH");
        public final static Property Temperature = new Property(4, Float.class, "Temperature", false, "TEMPERATURE");
        public final static Property Volt = new Property(5, Integer.class, "Volt", false, "VOLT");
    };


    public BatteryReadingDao(DaoConfig config) {
        super(config);
    }
    
    public BatteryReadingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BATTERY_READING\" (" + //
                "\"TIME_STAMP\" INTEGER PRIMARY KEY NOT NULL ," + // 0: TimeStamp
                "\"PERCENT\" REAL," + // 1: Percent
                "\"CHARGING_TYPE\" INTEGER," + // 2: ChargingType
                "\"HEALTH\" INTEGER," + // 3: Health
                "\"TEMPERATURE\" REAL," + // 4: Temperature
                "\"VOLT\" INTEGER);"); // 5: Volt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BATTERY_READING\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BatteryReading entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTimeStamp().getTime());
 
        Float Percent = entity.getPercent();
        if (Percent != null) {
            stmt.bindDouble(2, Percent);
        }
 
        Byte ChargingType = entity.getChargingType();
        if (ChargingType != null) {
            stmt.bindLong(3, ChargingType);
        }
 
        Byte Health = entity.getHealth();
        if (Health != null) {
            stmt.bindLong(4, Health);
        }
 
        Float Temperature = entity.getTemperature();
        if (Temperature != null) {
            stmt.bindDouble(5, Temperature);
        }
 
        Integer Volt = entity.getVolt();
        if (Volt != null) {
            stmt.bindLong(6, Volt);
        }
    }

    /** @inheritdoc */
    @Override
    public java.util.Date readKey(Cursor cursor, int offset) {
        return new java.util.Date(cursor.getLong(offset + 0));
    }    

    /** @inheritdoc */
    @Override
    public BatteryReading readEntity(Cursor cursor, int offset) {
        BatteryReading entity = new BatteryReading( //
            new java.util.Date(cursor.getLong(offset + 0)), // TimeStamp
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // Percent
            cursor.isNull(offset + 2) ? null : (byte) cursor.getShort(offset + 2), // ChargingType
            cursor.isNull(offset + 3) ? null : (byte) cursor.getShort(offset + 3), // Health
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // Temperature
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // Volt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BatteryReading entity, int offset) {
        entity.setTimeStamp(new java.util.Date(cursor.getLong(offset + 0)));
        entity.setPercent(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setChargingType(cursor.isNull(offset + 2) ? null : (byte) cursor.getShort(offset + 2));
        entity.setHealth(cursor.isNull(offset + 3) ? null : (byte) cursor.getShort(offset + 3));
        entity.setTemperature(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setVolt(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected java.util.Date updateKeyAfterInsert(BatteryReading entity, long rowId) {
        return entity.getTimeStamp();
    }
    
    /** @inheritdoc */
    @Override
    public java.util.Date getKey(BatteryReading entity) {
        if(entity != null) {
            return entity.getTimeStamp();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
