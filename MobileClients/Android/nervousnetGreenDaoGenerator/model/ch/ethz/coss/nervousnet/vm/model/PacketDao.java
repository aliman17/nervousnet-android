package ch.ethz.coss.nervousnet.vm.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import ch.ethz.coss.nervousnet.vm.model.Packet;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PACKET".
*/
public class PacketDao extends AbstractDao<Packet, java.util.Date> {

    public static final String TABLENAME = "PACKET";

    /**
     * Properties of entity Packet.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TimeStamp = new Property(0, java.util.Date.class, "TimeStamp", true, "TIME_STAMP");
        public final static Property Sensor1 = new Property(1, java.util.Date.class, "sensor1", false, "SENSOR1");
        public final static Property Sensor2 = new Property(2, java.util.Date.class, "sensor2", false, "SENSOR2");
        public final static Property Sensor3 = new Property(3, java.util.Date.class, "sensor3", false, "SENSOR3");
        public final static Property Sensor4 = new Property(4, java.util.Date.class, "sensor4", false, "SENSOR4");
        public final static Property Sensor5 = new Property(5, java.util.Date.class, "sensor5", false, "SENSOR5");
        public final static Property Sensor6 = new Property(6, java.util.Date.class, "sensor6", false, "SENSOR6");
        public final static Property Sensor7 = new Property(7, java.util.Date.class, "sensor7", false, "SENSOR7");
        public final static Property Sensor8 = new Property(8, java.util.Date.class, "sensor8", false, "SENSOR8");
        public final static Property Sensor9 = new Property(9, java.util.Date.class, "sensor9", false, "SENSOR9");
        public final static Property Sensor10 = new Property(10, java.util.Date.class, "sensor10", false, "SENSOR10");
        public final static Property Sensor11 = new Property(11, java.util.Date.class, "sensor11", false, "SENSOR11");
        public final static Property Sensor12 = new Property(12, java.util.Date.class, "sensor12", false, "SENSOR12");
        public final static Property Sensor13 = new Property(13, java.util.Date.class, "sensor13", false, "SENSOR13");
    };

    private DaoSession daoSession;


    public PacketDao(DaoConfig config) {
        super(config);
    }
    
    public PacketDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PACKET\" (" + //
                "\"TIME_STAMP\" INTEGER PRIMARY KEY NOT NULL ," + // 0: TimeStamp
                "\"SENSOR1\" INTEGER," + // 1: sensor1
                "\"SENSOR2\" INTEGER," + // 2: sensor2
                "\"SENSOR3\" INTEGER," + // 3: sensor3
                "\"SENSOR4\" INTEGER," + // 4: sensor4
                "\"SENSOR5\" INTEGER," + // 5: sensor5
                "\"SENSOR6\" INTEGER," + // 6: sensor6
                "\"SENSOR7\" INTEGER," + // 7: sensor7
                "\"SENSOR8\" INTEGER," + // 8: sensor8
                "\"SENSOR9\" INTEGER," + // 9: sensor9
                "\"SENSOR10\" INTEGER," + // 10: sensor10
                "\"SENSOR11\" INTEGER," + // 11: sensor11
                "\"SENSOR12\" INTEGER," + // 12: sensor12
                "\"SENSOR13\" INTEGER);"); // 13: sensor13
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PACKET\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Packet entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTimeStamp().getTime());
 
        java.util.Date sensor1 = entity.getSensor1();
        if (sensor1 != null) {
            stmt.bindLong(2, sensor1.getTime());
        }
 
        java.util.Date sensor2 = entity.getSensor2();
        if (sensor2 != null) {
            stmt.bindLong(3, sensor2.getTime());
        }
 
        java.util.Date sensor3 = entity.getSensor3();
        if (sensor3 != null) {
            stmt.bindLong(4, sensor3.getTime());
        }
 
        java.util.Date sensor4 = entity.getSensor4();
        if (sensor4 != null) {
            stmt.bindLong(5, sensor4.getTime());
        }
 
        java.util.Date sensor5 = entity.getSensor5();
        if (sensor5 != null) {
            stmt.bindLong(6, sensor5.getTime());
        }
 
        java.util.Date sensor6 = entity.getSensor6();
        if (sensor6 != null) {
            stmt.bindLong(7, sensor6.getTime());
        }
 
        java.util.Date sensor7 = entity.getSensor7();
        if (sensor7 != null) {
            stmt.bindLong(8, sensor7.getTime());
        }
 
        java.util.Date sensor8 = entity.getSensor8();
        if (sensor8 != null) {
            stmt.bindLong(9, sensor8.getTime());
        }
 
        java.util.Date sensor9 = entity.getSensor9();
        if (sensor9 != null) {
            stmt.bindLong(10, sensor9.getTime());
        }
 
        java.util.Date sensor10 = entity.getSensor10();
        if (sensor10 != null) {
            stmt.bindLong(11, sensor10.getTime());
        }
 
        java.util.Date sensor11 = entity.getSensor11();
        if (sensor11 != null) {
            stmt.bindLong(12, sensor11.getTime());
        }
 
        java.util.Date sensor12 = entity.getSensor12();
        if (sensor12 != null) {
            stmt.bindLong(13, sensor12.getTime());
        }
 
        java.util.Date sensor13 = entity.getSensor13();
        if (sensor13 != null) {
            stmt.bindLong(14, sensor13.getTime());
        }
    }

    @Override
    protected void attachEntity(Packet entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public java.util.Date readKey(Cursor cursor, int offset) {
        return new java.util.Date(cursor.getLong(offset + 0));
    }    

    /** @inheritdoc */
    @Override
    public Packet readEntity(Cursor cursor, int offset) {
        Packet entity = new Packet( //
            new java.util.Date(cursor.getLong(offset + 0)), // TimeStamp
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // sensor1
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // sensor2
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // sensor3
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // sensor4
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // sensor5
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // sensor6
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // sensor7
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // sensor8
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // sensor9
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // sensor10
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // sensor11
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // sensor12
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)) // sensor13
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Packet entity, int offset) {
        entity.setTimeStamp(new java.util.Date(cursor.getLong(offset + 0)));
        entity.setSensor1(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setSensor2(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setSensor3(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setSensor4(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setSensor5(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setSensor6(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setSensor7(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setSensor8(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setSensor9(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setSensor10(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setSensor11(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setSensor12(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setSensor13(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
     }
    
    /** @inheritdoc */
    @Override
    protected java.util.Date updateKeyAfterInsert(Packet entity, long rowId) {
        return entity.getTimeStamp();
    }
    
    /** @inheritdoc */
    @Override
    public java.util.Date getKey(Packet entity) {
        if(entity != null) {
            return entity.getTimeStamp();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getLocationReadingDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getAccelReadingDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getBatteryReadingDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getBeaconReadingDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T4", daoSession.getConnectivityReadingDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T5", daoSession.getGyroReadingDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T6", daoSession.getHumidityReadingDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T7", daoSession.getLightReadingDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T8", daoSession.getMagneticReadingDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T9", daoSession.getNoiseReadingDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T10", daoSession.getPressureReadingDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T11", daoSession.getProximityReadingDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T12", daoSession.getTemperatureReadingDao().getAllColumns());
            builder.append(" FROM PACKET T");
            builder.append(" LEFT JOIN LOCATION_READING T0 ON T.\"SENSOR1\"=T0.\"TIME_STAMP\"");
            builder.append(" LEFT JOIN ACCEL_READING T1 ON T.\"SENSOR2\"=T1.\"TIME_STAMP\"");
            builder.append(" LEFT JOIN BATTERY_READING T2 ON T.\"SENSOR3\"=T2.\"TIME_STAMP\"");
            builder.append(" LEFT JOIN BEACON_READING T3 ON T.\"SENSOR4\"=T3.\"TIME_STAMP\"");
            builder.append(" LEFT JOIN CONNECTIVITY_READING T4 ON T.\"SENSOR5\"=T4.\"TIME_STAMP\"");
            builder.append(" LEFT JOIN GYRO_READING T5 ON T.\"SENSOR6\"=T5.\"TIME_STAMP\"");
            builder.append(" LEFT JOIN HUMIDITY_READING T6 ON T.\"SENSOR7\"=T6.\"TIME_STAMP\"");
            builder.append(" LEFT JOIN LIGHT_READING T7 ON T.\"SENSOR8\"=T7.\"TIME_STAMP\"");
            builder.append(" LEFT JOIN MAGNETIC_READING T8 ON T.\"SENSOR9\"=T8.\"TIME_STAMP\"");
            builder.append(" LEFT JOIN NOISE_READING T9 ON T.\"SENSOR10\"=T9.\"TIME_STAMP\"");
            builder.append(" LEFT JOIN PRESSURE_READING T10 ON T.\"SENSOR11\"=T10.\"TIME_STAMP\"");
            builder.append(" LEFT JOIN PROXIMITY_READING T11 ON T.\"SENSOR12\"=T11.\"TIME_STAMP\"");
            builder.append(" LEFT JOIN TEMPERATURE_READING T12 ON T.\"SENSOR13\"=T12.\"TIME_STAMP\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Packet loadCurrentDeep(Cursor cursor, boolean lock) {
        Packet entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        LocationReading locationReading = loadCurrentOther(daoSession.getLocationReadingDao(), cursor, offset);
        entity.setLocationReading(locationReading);
        offset += daoSession.getLocationReadingDao().getAllColumns().length;

        AccelReading accelReading = loadCurrentOther(daoSession.getAccelReadingDao(), cursor, offset);
        entity.setAccelReading(accelReading);
        offset += daoSession.getAccelReadingDao().getAllColumns().length;

        BatteryReading batteryReading = loadCurrentOther(daoSession.getBatteryReadingDao(), cursor, offset);
        entity.setBatteryReading(batteryReading);
        offset += daoSession.getBatteryReadingDao().getAllColumns().length;

        BeaconReading beaconReading = loadCurrentOther(daoSession.getBeaconReadingDao(), cursor, offset);
        entity.setBeaconReading(beaconReading);
        offset += daoSession.getBeaconReadingDao().getAllColumns().length;

        ConnectivityReading connectivityReading = loadCurrentOther(daoSession.getConnectivityReadingDao(), cursor, offset);
        entity.setConnectivityReading(connectivityReading);
        offset += daoSession.getConnectivityReadingDao().getAllColumns().length;

        GyroReading gyroReading = loadCurrentOther(daoSession.getGyroReadingDao(), cursor, offset);
        entity.setGyroReading(gyroReading);
        offset += daoSession.getGyroReadingDao().getAllColumns().length;

        HumidityReading humidityReading = loadCurrentOther(daoSession.getHumidityReadingDao(), cursor, offset);
        entity.setHumidityReading(humidityReading);
        offset += daoSession.getHumidityReadingDao().getAllColumns().length;

        LightReading lightReading = loadCurrentOther(daoSession.getLightReadingDao(), cursor, offset);
        entity.setLightReading(lightReading);
        offset += daoSession.getLightReadingDao().getAllColumns().length;

        MagneticReading magneticReading = loadCurrentOther(daoSession.getMagneticReadingDao(), cursor, offset);
        entity.setMagneticReading(magneticReading);
        offset += daoSession.getMagneticReadingDao().getAllColumns().length;

        NoiseReading noiseReading = loadCurrentOther(daoSession.getNoiseReadingDao(), cursor, offset);
        entity.setNoiseReading(noiseReading);
        offset += daoSession.getNoiseReadingDao().getAllColumns().length;

        PressureReading pressureReading = loadCurrentOther(daoSession.getPressureReadingDao(), cursor, offset);
        entity.setPressureReading(pressureReading);
        offset += daoSession.getPressureReadingDao().getAllColumns().length;

        ProximityReading proximityReading = loadCurrentOther(daoSession.getProximityReadingDao(), cursor, offset);
        entity.setProximityReading(proximityReading);
        offset += daoSession.getProximityReadingDao().getAllColumns().length;

        TemperatureReading temperatureReading = loadCurrentOther(daoSession.getTemperatureReadingDao(), cursor, offset);
        entity.setTemperatureReading(temperatureReading);

        return entity;    
    }

    public Packet loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Packet> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Packet> list = new ArrayList<Packet>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Packet> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Packet> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
