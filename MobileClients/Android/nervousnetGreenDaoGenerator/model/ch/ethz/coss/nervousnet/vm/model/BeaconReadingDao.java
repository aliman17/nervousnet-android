package ch.ethz.coss.nervousnet.vm.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ch.ethz.coss.nervousnet.vm.model.BeaconReading;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BEACON_READING".
*/
public class BeaconReadingDao extends AbstractDao<BeaconReading, java.util.Date> {

    public static final String TABLENAME = "BEACON_READING";

    /**
     * Properties of entity BeaconReading.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TimeStamp = new Property(0, java.util.Date.class, "TimeStamp", true, "TIME_STAMP");
    };


    public BeaconReadingDao(DaoConfig config) {
        super(config);
    }
    
    public BeaconReadingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BEACON_READING\" (" + //
                "\"TIME_STAMP\" INTEGER PRIMARY KEY NOT NULL );"); // 0: TimeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BEACON_READING\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BeaconReading entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTimeStamp().getTime());
    }

    /** @inheritdoc */
    @Override
    public java.util.Date readKey(Cursor cursor, int offset) {
        return new java.util.Date(cursor.getLong(offset + 0));
    }    

    /** @inheritdoc */
    @Override
    public BeaconReading readEntity(Cursor cursor, int offset) {
        BeaconReading entity = new BeaconReading( //
            new java.util.Date(cursor.getLong(offset + 0)) // TimeStamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BeaconReading entity, int offset) {
        entity.setTimeStamp(new java.util.Date(cursor.getLong(offset + 0)));
     }
    
    /** @inheritdoc */
    @Override
    protected java.util.Date updateKeyAfterInsert(BeaconReading entity, long rowId) {
        return entity.getTimeStamp();
    }
    
    /** @inheritdoc */
    @Override
    public java.util.Date getKey(BeaconReading entity) {
        if(entity != null) {
            return entity.getTimeStamp();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
