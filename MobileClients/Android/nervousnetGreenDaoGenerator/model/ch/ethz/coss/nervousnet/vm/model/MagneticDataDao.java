package ch.ethz.coss.nervousnet.vm.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ch.ethz.coss.nervousnet.vm.model.MagneticData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAGNETIC_DATA".
*/
public class MagneticDataDao extends AbstractDao<MagneticData, Long> {

    public static final String TABLENAME = "MAGNETIC_DATA";

    /**
     * Properties of entity MagneticData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TimeStamp = new Property(0, long.class, "TimeStamp", true, "TIME_STAMP");
        public final static Property MagX = new Property(1, Float.class, "MagX", false, "MAG_X");
        public final static Property MagY = new Property(2, Float.class, "MagY", false, "MAG_Y");
        public final static Property MagZ = new Property(3, Float.class, "MagZ", false, "MAG_Z");
        public final static Property Volatility = new Property(4, long.class, "Volatility", false, "VOLATILITY");
        public final static Property ShareFlag = new Property(5, Boolean.class, "ShareFlag", false, "SHARE_FLAG");
    };


    public MagneticDataDao(DaoConfig config) {
        super(config);
    }
    
    public MagneticDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAGNETIC_DATA\" (" + //
                "\"TIME_STAMP\" INTEGER PRIMARY KEY NOT NULL ," + // 0: TimeStamp
                "\"MAG_X\" REAL," + // 1: MagX
                "\"MAG_Y\" REAL," + // 2: MagY
                "\"MAG_Z\" REAL," + // 3: MagZ
                "\"VOLATILITY\" INTEGER NOT NULL ," + // 4: Volatility
                "\"SHARE_FLAG\" INTEGER);"); // 5: ShareFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAGNETIC_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MagneticData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTimeStamp());
 
        Float MagX = entity.getMagX();
        if (MagX != null) {
            stmt.bindDouble(2, MagX);
        }
 
        Float MagY = entity.getMagY();
        if (MagY != null) {
            stmt.bindDouble(3, MagY);
        }
 
        Float MagZ = entity.getMagZ();
        if (MagZ != null) {
            stmt.bindDouble(4, MagZ);
        }
        stmt.bindLong(5, entity.getVolatility());
 
        Boolean ShareFlag = entity.getShareFlag();
        if (ShareFlag != null) {
            stmt.bindLong(6, ShareFlag ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MagneticData readEntity(Cursor cursor, int offset) {
        MagneticData entity = new MagneticData( //
            cursor.getLong(offset + 0), // TimeStamp
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // MagX
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // MagY
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // MagZ
            cursor.getLong(offset + 4), // Volatility
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // ShareFlag
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MagneticData entity, int offset) {
        entity.setTimeStamp(cursor.getLong(offset + 0));
        entity.setMagX(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setMagY(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setMagZ(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setVolatility(cursor.getLong(offset + 4));
        entity.setShareFlag(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MagneticData entity, long rowId) {
        entity.setTimeStamp(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MagneticData entity) {
        if(entity != null) {
            return entity.getTimeStamp();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
