package ch.ethz.coss.nervousnet.vm.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ch.ethz.coss.nervousnet.vm.model.AccelReading;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCEL_READING".
*/
public class AccelReadingDao extends AbstractDao<AccelReading, java.util.Date> {

    public static final String TABLENAME = "ACCEL_READING";

    /**
     * Properties of entity AccelReading.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TimeStamp = new Property(0, java.util.Date.class, "TimeStamp", true, "TIME_STAMP");
        public final static Property X = new Property(1, Float.class, "X", false, "X");
        public final static Property Y = new Property(2, Float.class, "Y", false, "Y");
        public final static Property Z = new Property(3, Float.class, "Z", false, "Z");
    };


    public AccelReadingDao(DaoConfig config) {
        super(config);
    }
    
    public AccelReadingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCEL_READING\" (" + //
                "\"TIME_STAMP\" INTEGER PRIMARY KEY NOT NULL ," + // 0: TimeStamp
                "\"X\" REAL," + // 1: X
                "\"Y\" REAL," + // 2: Y
                "\"Z\" REAL);"); // 3: Z
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCEL_READING\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AccelReading entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTimeStamp().getTime());
 
        Float X = entity.getX();
        if (X != null) {
            stmt.bindDouble(2, X);
        }
 
        Float Y = entity.getY();
        if (Y != null) {
            stmt.bindDouble(3, Y);
        }
 
        Float Z = entity.getZ();
        if (Z != null) {
            stmt.bindDouble(4, Z);
        }
    }

    /** @inheritdoc */
    @Override
    public java.util.Date readKey(Cursor cursor, int offset) {
        return new java.util.Date(cursor.getLong(offset + 0));
    }    

    /** @inheritdoc */
    @Override
    public AccelReading readEntity(Cursor cursor, int offset) {
        AccelReading entity = new AccelReading( //
            new java.util.Date(cursor.getLong(offset + 0)), // TimeStamp
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // X
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // Y
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3) // Z
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AccelReading entity, int offset) {
        entity.setTimeStamp(new java.util.Date(cursor.getLong(offset + 0)));
        entity.setX(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setY(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setZ(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected java.util.Date updateKeyAfterInsert(AccelReading entity, long rowId) {
        return entity.getTimeStamp();
    }
    
    /** @inheritdoc */
    @Override
    public java.util.Date getKey(AccelReading entity) {
        if(entity != null) {
            return entity.getTimeStamp();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
