package ch.ethz.coss.nervousnet.vm.model;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import ch.ethz.coss.nervousnet.vm.model.ConfigDao;
import ch.ethz.coss.nervousnet.vm.model.SensorReadingDao;
import ch.ethz.coss.nervousnet.vm.model.LocationReadingDao;
import ch.ethz.coss.nervousnet.vm.model.AccelReadingDao;
import ch.ethz.coss.nervousnet.vm.model.BatteryReadingDao;
import ch.ethz.coss.nervousnet.vm.model.BeaconReadingDao;
import ch.ethz.coss.nervousnet.vm.model.ConnectivityReadingDao;
import ch.ethz.coss.nervousnet.vm.model.GyroReadingDao;
import ch.ethz.coss.nervousnet.vm.model.HumidityReadingDao;
import ch.ethz.coss.nervousnet.vm.model.LightReadingDao;
import ch.ethz.coss.nervousnet.vm.model.MagneticReadingDao;
import ch.ethz.coss.nervousnet.vm.model.NoiseReadingDao;
import ch.ethz.coss.nervousnet.vm.model.PressureReadingDao;
import ch.ethz.coss.nervousnet.vm.model.ProximityReadingDao;
import ch.ethz.coss.nervousnet.vm.model.TemperatureReadingDao;
import ch.ethz.coss.nervousnet.vm.model.PacketDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 3): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 3;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        ConfigDao.createTable(db, ifNotExists);
        SensorReadingDao.createTable(db, ifNotExists);
        LocationReadingDao.createTable(db, ifNotExists);
        AccelReadingDao.createTable(db, ifNotExists);
        BatteryReadingDao.createTable(db, ifNotExists);
        BeaconReadingDao.createTable(db, ifNotExists);
        ConnectivityReadingDao.createTable(db, ifNotExists);
        GyroReadingDao.createTable(db, ifNotExists);
        HumidityReadingDao.createTable(db, ifNotExists);
        LightReadingDao.createTable(db, ifNotExists);
        MagneticReadingDao.createTable(db, ifNotExists);
        NoiseReadingDao.createTable(db, ifNotExists);
        PressureReadingDao.createTable(db, ifNotExists);
        ProximityReadingDao.createTable(db, ifNotExists);
        TemperatureReadingDao.createTable(db, ifNotExists);
        PacketDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        ConfigDao.dropTable(db, ifExists);
        SensorReadingDao.dropTable(db, ifExists);
        LocationReadingDao.dropTable(db, ifExists);
        AccelReadingDao.dropTable(db, ifExists);
        BatteryReadingDao.dropTable(db, ifExists);
        BeaconReadingDao.dropTable(db, ifExists);
        ConnectivityReadingDao.dropTable(db, ifExists);
        GyroReadingDao.dropTable(db, ifExists);
        HumidityReadingDao.dropTable(db, ifExists);
        LightReadingDao.dropTable(db, ifExists);
        MagneticReadingDao.dropTable(db, ifExists);
        NoiseReadingDao.dropTable(db, ifExists);
        PressureReadingDao.dropTable(db, ifExists);
        ProximityReadingDao.dropTable(db, ifExists);
        TemperatureReadingDao.dropTable(db, ifExists);
        PacketDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(ConfigDao.class);
        registerDaoClass(SensorReadingDao.class);
        registerDaoClass(LocationReadingDao.class);
        registerDaoClass(AccelReadingDao.class);
        registerDaoClass(BatteryReadingDao.class);
        registerDaoClass(BeaconReadingDao.class);
        registerDaoClass(ConnectivityReadingDao.class);
        registerDaoClass(GyroReadingDao.class);
        registerDaoClass(HumidityReadingDao.class);
        registerDaoClass(LightReadingDao.class);
        registerDaoClass(MagneticReadingDao.class);
        registerDaoClass(NoiseReadingDao.class);
        registerDaoClass(PressureReadingDao.class);
        registerDaoClass(ProximityReadingDao.class);
        registerDaoClass(TemperatureReadingDao.class);
        registerDaoClass(PacketDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
